  #include <iostream>
 #include <vector>
 using namespace std;
 // Function to add two matrices
 vector<vector<int>> matrixAddition(const vector<vector<int>>& A,
 const vector<vector<int>>& B) {
 int n = A.size();
 vector<vector<int>> result(n, vector<int>(n));
 for (int c = 0; c < n; ++c) {
 }
for (int d = 0; d < n; ++d) {
 result[c][d] = A[c][d] + B[c][d];
 }
 }
     return result;
}
 // Function to subtract two matrices
 vector<vector<int>> matrixSubtraction(const vector<vector<int>>&
 A, const vector<vector<int>>& B) {
 int n = A.size();
 vector<vector<int>> result(n, vector<int>(n));
 for (int c = 0; c < n; ++c) {
 for (int d = 0; d < n; ++d) {
 }
result[c][d] = A[c][d] - B[c][d];
       return result;
}
 // Function for Strassen's Algorithm for Matrix Multiplication
 vector<vector<int>> strassensAlgorithm(const vector<vector<int>>&
 A, const vector<vector<int>>& B) {
 int n = A.size();
 // Base case: If matrices are 1x1, just multiply them
 if (n == 1) {
 vector<vector<int>> result(1, vector<int>(1));
 result[0][0] = A[0][0] * B[0][0];
 return result;
 }
 int ns = n / 2;
 vector<vector<int>> result(n, vector<int>(n));
 // Divide matrices into submatrices
 vector<vector<int>> A11(ns, vector<int>(ns));

  vector<vector<int>> A12(ns, vector<int>(ns));
vector<vector<int>> A21(ns, vector<int>(ns));
vector<vector<int>> A22(ns, vector<int>(ns));
vector<vector<int>> B11(ns, vector<int>(ns));
vector<vector<int>> B12(ns, vector<int>(ns));
vector<vector<int>> B21(ns, vector<int>(ns));
vector<vector<int>> B22(ns, vector<int>(ns));
     // Populate submatrices
    // Recursively compute products of submatrices
    // Compute the result submatrices
   // Combine submatrices to get the final result
      return result;
}
     int main() {
 }
vector<vector<int>> A = {{1, 3}, {7, 5}};
vector<vector<int>> B = {{6, 8}, {4, 2}};
 vector<vector<int>> result = strassensAlgorithm(A, B);
 for (int c = 0; c < result.size(); ++c) {
 for (int d = 0; d < result[0].size(); ++d) {
 cout << result[c][d] << " ";
 }
 cout << endl;
 }
